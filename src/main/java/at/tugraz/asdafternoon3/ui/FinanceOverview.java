package at.tugraz.asdafternoon3.ui;

import at.tugraz.asdafternoon3.FlatApplication;
import at.tugraz.asdafternoon3.businesslogic.FinanceDAO;
import at.tugraz.asdafternoon3.businesslogic.FlatDAO;
import at.tugraz.asdafternoon3.data.Finance;
import at.tugraz.asdafternoon3.data.Flat;
import at.tugraz.asdafternoon3.data.Roommate;
import at.tugraz.asdafternoon3.database.DatabaseConnection;
import at.tugraz.asdafternoon3.ui.combobox.RoommateComboBoxModel;
import at.tugraz.asdafternoon3.ui.table.FinanceFurnitureModel;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;
import com.intellij.uiDesigner.core.Spacer;

import javax.swing.*;
import java.awt.*;
import java.util.ArrayList;
import java.util.List;

public class FinanceOverview {
    private JPanel contentPane;
    private JTable financeTable;
    private JButton backButton;
    private JButton removeButton;
    private JButton addButton;
    private JComboBox<Roommate> cbRoommate;
    private JSpinner spMoney;
    private JTextField tfName;
    private JLabel lHeader;

    private final Flat activeFlat;
    private final RoommateComboBoxModel model;
    private final FinanceFurnitureModel tableModel;

    public FinanceOverview(Flat flat) {
        initLocalizations();
        this.activeFlat = flat;

        List<Roommate> roommates = new ArrayList<>();
        try {
            roommates = DatabaseConnection.getInstance().createDao(FlatDAO.class).getRoommates(flat);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(getContentPane(), "Roommates could not be found.", "Error", JOptionPane.ERROR_MESSAGE);
        }

        model = new RoommateComboBoxModel(roommates);
        cbRoommate.setModel(model);

        List<Finance> finances = new ArrayList<>();
        try {
            finances = DatabaseConnection.getInstance().createDao(FlatDAO.class).getFinance(flat);
        } catch (Exception e) {
            JOptionPane.showMessageDialog(getContentPane(), "Finances could not be found.", "Error", JOptionPane.ERROR_MESSAGE);
            e.printStackTrace();
        }

        tableModel = new FinanceFurnitureModel(finances);
        financeTable.setModel(tableModel);

        backButton.addActionListener(e -> {
            FlatApplication.get().setContentPane(new FlatOverview(activeFlat).getContentPane());
        });

        addButton.addActionListener(e -> {
            Finance finance = createFinance();
            if (finance != null) {
                tableModel.addFinance(finance);
            }
        });

        removeButton.addActionListener(e -> {
            int rowIndex = financeTable.getSelectedRow();
            Finance finance = tableModel.getFinanceAtIndex(rowIndex);

            try {
                DatabaseConnection.getInstance().createDao(FinanceDAO.class).delete(finance);
                tableModel.removeFinance(rowIndex);
            } catch (Exception ex) {
                JOptionPane.showMessageDialog(contentPane, "Could not remove roommate");
            }
        });
    }

    private void initLocalizations() {
        lHeader.setText(Localization.getInstance().getCurrent().getString("financeoverview.header"));
        addButton.setText(Localization.getInstance().getCurrent().getString("financeoverview.button.add"));
        removeButton.setText(Localization.getInstance().getCurrent().getString("financeoverview.button.remove"));
        backButton.setText(Localization.getInstance().getCurrent().getString("frame.button.back"));
    }

    private Finance createFinance() {
        Roommate roommate = (Roommate) cbRoommate.getSelectedItem();

        if (roommate == null) {
            JOptionPane.showMessageDialog(contentPane, "Roommate not selected");
            return null;
        }

        Finance newFinance = new Finance(tfName.getText(),
                (Integer) spMoney.getValue(),
                roommate,
                activeFlat);

        try {
            FinanceDAO creator = DatabaseConnection.getInstance().createDao(FinanceDAO.class);

            if (!creator.validate(newFinance)) {
                JOptionPane.showMessageDialog(contentPane, "Finance data is not valid");
            } else {
                return creator.create(newFinance);
            }
        } catch (Exception e) {
            JOptionPane.showMessageDialog(contentPane, "Could not create finance");
        }

        return null;
    }

    public JPanel getContentPane() {
        return contentPane;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new GridLayoutManager(3, 1, new Insets(10, 10, 10, 10), -1, -1));
        contentPane.setBackground(new Color(-14078925));
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(1, 3, new Insets(0, 0, 0, 0), -1, -1));
        panel1.setBackground(new Color(-14078925));
        contentPane.add(panel1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        backButton = new JButton();
        backButton.setBackground(new Color(-12816512));
        backButton.setForeground(new Color(-2103318));
        backButton.setText("Back");
        panel1.add(backButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final Spacer spacer1 = new Spacer();
        panel1.add(spacer1, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, 1, null, null, null, 0, false));
        lHeader = new JLabel();
        Font lHeaderFont = this.$$$getFont$$$(null, -1, 22, lHeader.getFont());
        if (lHeaderFont != null) lHeader.setFont(lHeaderFont);
        lHeader.setForeground(new Color(-4145152));
        lHeader.setText("Finance Overview");
        panel1.add(lHeader, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 6, new Insets(0, 0, 0, 0), -1, -1));
        panel2.setBackground(new Color(-14078925));
        contentPane.add(panel2, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        removeButton = new JButton();
        removeButton.setBackground(new Color(-12816512));
        removeButton.setForeground(new Color(-2103318));
        removeButton.setText("Remove");
        panel2.add(removeButton, new GridConstraints(0, 5, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        addButton = new JButton();
        addButton.setBackground(new Color(-12816512));
        addButton.setForeground(new Color(-2103318));
        addButton.setText("Add");
        panel2.add(addButton, new GridConstraints(0, 4, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        cbRoommate = new JComboBox();
        cbRoommate.setBackground(new Color(-12632257));
        cbRoommate.setForeground(new Color(-2103318));
        panel2.add(cbRoommate, new GridConstraints(0, 3, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        spMoney = new JSpinner();
        spMoney.setBackground(new Color(-12632257));
        spMoney.setForeground(new Color(-2103318));
        panel2.add(spMoney, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label1 = new JLabel();
        label1.setForeground(new Color(-2103318));
        label1.setText("â‚¬");
        panel2.add(label1, new GridConstraints(0, 2, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tfName = new JTextField();
        tfName.setBackground(new Color(-12632257));
        tfName.setForeground(new Color(-2103318));
        panel2.add(tfName, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        financeTable = new JTable();
        financeTable.setBackground(new Color(-14078925));
        financeTable.setForeground(new Color(-2103318));
        financeTable.setGridColor(new Color(-12816512));
        contentPane.add(financeTable, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

}
