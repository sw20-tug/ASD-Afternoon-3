package at.tugraz.asdafternoon3.ui;

import at.tugraz.asdafternoon3.FlatApplication;
import at.tugraz.asdafternoon3.businesslogic.FinanceFlatDAO;
import at.tugraz.asdafternoon3.businesslogic.FlatDAO;
import at.tugraz.asdafternoon3.data.FinanceFlat;
import at.tugraz.asdafternoon3.database.DatabaseConnection;
import at.tugraz.asdafternoon3.data.Flat;
import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class CreateFlatUI {
    private JPanel contentPane;
    private JPanel Panel1;
    private JButton btCreateNewFlat;
    private JTextField tfName;
    private JTextField tfAddress;
    private JTextField tfSize;
    private JLabel lHeader;
    private JLabel lSubHeader;
    private JLabel lName;
    private JLabel lAddress;
    private JLabel lSize;
    private JButton clickMeButton;

    public CreateFlatUI() {
        initLocalizations();
        btCreateNewFlat.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                createFlat();
            }
        });
    }

    private void initLocalizations() {
        lHeader.setText(Localization.getInstance().getCurrent().getString("createflat.header"));
        lSubHeader.setText(Localization.getInstance().getCurrent().getString("createflat.subheader"));
        lName.setText(Localization.getInstance().getCurrent().getString("createflat.name"));
        lAddress.setText(Localization.getInstance().getCurrent().getString("createflat.address"));
        lSize.setText(Localization.getInstance().getCurrent().getString("createflat.size"));
        btCreateNewFlat.setText(Localization.getInstance().getCurrent().getString("createflat.button.create"));
    }

    private void createFlat() {
        Flat newFlat;
        int size = 0;

        try {
            size = Integer.parseInt(tfSize.getText());
        } catch (Exception ex) {
            System.out.println("Exception: Couldn't convert string to int: " + ex.getLocalizedMessage());
        }

        newFlat = new Flat(tfName.getText(), size, tfAddress.getText());
        newFlat.setIsCurrent(true);
        try {
            FlatDAO creator = DatabaseConnection.getInstance().createDao(FlatDAO.class);
            FinanceFlatDAO financeCreator = DatabaseConnection.getInstance().createDao(FinanceFlatDAO.class);

            if (!creator.validate(newFlat)) {
                JOptionPane.showMessageDialog(contentPane, "Flat data is not valid");
            } else {
                newFlat = creator.create(newFlat);
                instantiateFinanceFlatItems(newFlat, financeCreator);
                JOptionPane.showMessageDialog(contentPane, "Created flat with id " + newFlat.getId());
                FlatApplication.get().setContentPane(new FlatOverview(newFlat).getContentPane());
            }
        } catch (Exception e) {
            e.printStackTrace();
            JOptionPane.showMessageDialog(contentPane, "Could not create flat");
        }
    }

    private void instantiateFinanceFlatItems(Flat flat, FinanceFlatDAO financeCreator) throws Exception {
        FinanceFlat rentalFee = new FinanceFlat("Rental fee", 0, flat);
        FinanceFlat smartphoneBill = new FinanceFlat("Smartphone bill", 0, flat);
        FinanceFlat energyBill = new FinanceFlat("Energy bill", 0, flat);
        FinanceFlat internetBill = new FinanceFlat("Internet bill", 0, flat);
        FinanceFlat tvBill = new FinanceFlat("TV bill", 0, flat);

        rentalFee = financeCreator.create(rentalFee);
        smartphoneBill = financeCreator.create(smartphoneBill);
        energyBill = financeCreator.create(energyBill);
        internetBill = financeCreator.create(internetBill);
        tvBill = financeCreator.create(tvBill);
    }

    public JPanel getContentPane() {
        return contentPane;
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        contentPane = new JPanel();
        contentPane.setLayout(new BorderLayout(0, 0));
        contentPane.setBackground(new Color(-14078925));
        contentPane.setFocusTraversalPolicyProvider(false);
        contentPane.setForeground(new Color(-14078925));
        contentPane.setMinimumSize(new Dimension(360, 360));
        contentPane.setPreferredSize(new Dimension(360, 360));
        Panel1 = new JPanel();
        Panel1.setLayout(new GridBagLayout());
        Panel1.setBackground(new Color(-14078925));
        Panel1.setFocusable(true);
        Panel1.setForeground(new Color(-14078925));
        contentPane.add(Panel1, BorderLayout.NORTH);
        lSubHeader = new JLabel();
        Font lSubHeaderFont = this.$$$getFont$$$(null, -1, 26, lSubHeader.getFont());
        if (lSubHeaderFont != null) lSubHeader.setFont(lSubHeaderFont);
        lSubHeader.setForeground(new Color(-4145152));
        lSubHeader.setHorizontalAlignment(10);
        lSubHeader.setHorizontalTextPosition(11);
        lSubHeader.setText("FLAT");
        GridBagConstraints gbc;
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 1;
        gbc.weightx = 1.0;
        gbc.weighty = 1.0;
        Panel1.add(lSubHeader, gbc);
        lHeader = new JLabel();
        Font lHeaderFont = this.$$$getFont$$$(null, -1, 28, lHeader.getFont());
        if (lHeaderFont != null) lHeader.setFont(lHeaderFont);
        lHeader.setForeground(new Color(-4145152));
        lHeader.setText("ASD-Afternoon-3");
        gbc = new GridBagConstraints();
        gbc.gridx = 0;
        gbc.gridy = 0;
        Panel1.add(lHeader, gbc);
        final JPanel panel1 = new JPanel();
        panel1.setLayout(new GridLayoutManager(3, 1, new Insets(0, 10, 0, 10), -1, -1));
        panel1.setBackground(new Color(-14078925));
        panel1.setForeground(new Color(-14078925));
        contentPane.add(panel1, BorderLayout.CENTER);
        final JPanel panel2 = new JPanel();
        panel2.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel2.setBackground(new Color(-14078925));
        panel2.setForeground(new Color(-12236470));
        panel1.add(panel2, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        lName = new JLabel();
        Font lNameFont = this.$$$getFont$$$("Arial", -1, 14, lName.getFont());
        if (lNameFont != null) lName.setFont(lNameFont);
        lName.setForeground(new Color(-4145152));
        lName.setText("Name");
        panel2.add(lName, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tfName = new JTextField();
        tfName.setBackground(new Color(-12632257));
        tfName.setCaretColor(new Color(-2103318));
        tfName.setDisabledTextColor(new Color(-2103318));
        tfName.setForeground(new Color(-2103318));
        panel2.add(tfName, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JPanel panel3 = new JPanel();
        panel3.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel3.setBackground(new Color(-14078925));
        panel1.add(panel3, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        lAddress = new JLabel();
        Font lAddressFont = this.$$$getFont$$$("Arial", -1, 14, lAddress.getFont());
        if (lAddressFont != null) lAddress.setFont(lAddressFont);
        lAddress.setForeground(new Color(-4145152));
        lAddress.setText("Address");
        panel3.add(lAddress, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tfAddress = new JTextField();
        tfAddress.setBackground(new Color(-12632257));
        tfAddress.setCaretColor(new Color(-2103318));
        tfAddress.setForeground(new Color(-2103318));
        panel3.add(tfAddress, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JPanel panel4 = new JPanel();
        panel4.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        panel4.setBackground(new Color(-14078925));
        panel1.add(panel4, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, null, 0, false));
        lSize = new JLabel();
        Font lSizeFont = this.$$$getFont$$$("Arial", -1, 14, lSize.getFont());
        if (lSizeFont != null) lSize.setFont(lSizeFont);
        lSize.setForeground(new Color(-4145152));
        lSize.setText("Size");
        panel4.add(lSize, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tfSize = new JTextField();
        tfSize.setBackground(new Color(-12632257));
        tfSize.setCaretColor(new Color(-2103318));
        tfSize.setForeground(new Color(-2103318));
        panel4.add(tfSize, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        final JPanel panel5 = new JPanel();
        panel5.setLayout(new FlowLayout(FlowLayout.CENTER, 5, 5));
        panel5.setBackground(new Color(-14078925));
        panel5.setForeground(new Color(-14078925));
        contentPane.add(panel5, BorderLayout.SOUTH);
        btCreateNewFlat = new JButton();
        btCreateNewFlat.setBackground(new Color(-12816512));
        btCreateNewFlat.setForeground(new Color(-2103318));
        btCreateNewFlat.setText("Create New Flat");
        panel5.add(btCreateNewFlat);
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return contentPane;
    }

}
